let abelhas = [{
	nome: "Abelha Europeia",
	nativa: false,
	tipo: "Operária",
	id: 1
},
{
	nome: "Abelha Asiática",
	nativa: false,
	tipo: "Rainha",
	id: 2
},
{
	nome: "Abelha Gigante",
	nativa: false,
	tipo: "Operária",
	id: 3
},
{
	nome: "Jataí",
	nativa: true,
	tipo: "Rainha",
	id: 4
},
{
	nome: "Jandaíra",
	nativa: true,
	tipo: "Zangão",
	id: 5
},
{
	nome: "Mandaguari",
	nativa: true,
	tipo: "Operária",
	id: 6
},
]

//3.0
const add1 = abelhas.map(function (abelhas){
	return abelhas.id + 1;
})

//3.1
const add = abelhas.map(abelhas => abelhas.id + 1) //retorna um valor aplicado ao que deseja

//3.2
let filter_ = abelhas.filter(abelhas => abelhas.nativa === true) //aplicar um comparativo (>,===, !=)

//3.3
let reduce_ = abelhas.reduce((total_id, abelhas) => total_id + abelhas.id, 0) //function(acumulador, array){return [combinação de array.obj], valor inicial do acumulador} **pode iniciar/retornar num, [arr], {obj}

//3.4
let every_ = abelhas.every(abelhas => abelhas.id > 0) //retorna booleano, every = todos se encaixam na condição

//3.5
let some_ = abelhas.some(abelhas => abelhas.tipo === 'Zangão') //retorna valor booleano, some = pelo menos um se encaixa na condição

//3.6
let find_ = abelhas.find(abelhas => abelhas.nativa === true) //retorna apenas o 1º elem. que satisfaz a condição

//3.7
let fm = filter_.map(abelhas => abelhas.tipo = 'Operária')

//3.8
const mr = abelhas.map(abelhas => abelhas.id * 2)
	.reduce((total, abelhas) => total + abelhas.id, 0)
